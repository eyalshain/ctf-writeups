cmd1 - pwnable.kr

first, let's look at the c code:

int filter(char* cmd){
        int r=0;
        r += strstr(cmd, "flag")!=0;
        r += strstr(cmd, "sh")!=0;
        r += strstr(cmd, "tmp")!=0;
        return r;
}
int main(int argc, char* argv[], char** envp){
        putenv("PATH=/thankyouverymuch");
        if(filter(argv[1])) return 0;
        setregid(getegid(), getegid());
        system( argv[1] );
        return 0;
}


in main, the program call filter on argv[1] (which is the first argument when we run the program: ./cmd1 <arg>)
if filter return not zero then it exit main it won't gives us the flag. then, it uses the system command to execute our argument.
executing our argument? that mean we can just pass a command? yes!! the problem is the filter function... let's take 'flag' for 
example: 
if cmd (our command) contains the string flag, strstr() will return something(not zero, cause r will get increased...) and then
the program will exit. so our goal is simple - provide a command to print the flag without using flag/sh/tmp
so one way we can do it is to use the cat command, but since we can't specify the file flag, we can usethe '*' to print all files
in the current directory. if we'll do it:

./cmd1 "/bin/cat *"

it will print a lot of gibrish, then the cmd1.c file, and then the flag!!:
PATH_environment?_Now_I_really_g3t_it,_mommy!

we can use another way, instead of printing all files, we can print just the last file of the directory - flag:

./cmd1 '/bin/cat $(/bin/ls -1 | /bin/tail -n 1)'

it will cat a file, the way we specifying the last file is like this:
using ls -1 to list all files in a different line, and then using tail with specifying the number(-n) 1, which mean first from last, 
which basically mean printing the last file of the directory, and again we get the flag!

*by the way, we are using /bin for every command since the program change the PATH variable, which is a variable that tells the shell
where to look for executables, generally it will look something like this:

/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin

but since they change it to something stupid, we got to specify 'bin'

that's it! bye :)
